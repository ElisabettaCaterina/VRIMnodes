<Workspace Version="1.3.2.2480" X="-162.859412455648" Y="142.657123564661" zoom="0.65933812936127" ScaleFactor="1" Name="CreateProfileFromFileOnXZ" Description="Function xz plane" ID="2d8734be-a8bd-46f6-80ed-567d3b14e06f" Category="VRIM.Function">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="632fd6b3-dcbb-44dd-97e9-404e8817311c" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1644.2286681272" y="839.291062900791" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="listEl[0];&#xA;listEl[1];&#xA;listEl[2];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <CoreNodeModels.Watch guid="3ee74fd0-7ffc-4116-bcb3-daf8e8610abd" type="CoreNodeModels.Watch" nickname="Watch" x="1299.73950870846" y="529.572455002792" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Watch>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="215f32c8-e704-4ed2-a31c-9f20389ca203" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Fuction_xz" x="393.869486040657" y="-30.0515816485793" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="// Copyright(c) 2017, Elisabetta Caterina Giovannini&#xA;// Alma Mater Studiorum - University of Bologna&#xA;// VRIM project&#xA;// www.unibo.it/sitoweb/elisabettacaterina.giovannini/en&#xA;// elisabettacaterina.giovannini@unibo.it&#xA;&#xA;i;&#xA;StartPt;&#xA;&#xA;FunctionGA (i,StartPt);&#xA;&#xA;def FunctionGA (i: var[],StartPt: var)&#xA;{&#xA;return = [Imperative]&#xA;{&#xA;if (i[0]==&quot;1a&quot;)&#xA;	{&#xA;	//Definition for 1a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	geometry =Line.ByStartPointEndPoint(A, D);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;1b&quot;)&#xA;	{&#xA;	//Definition for 1b&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 1b&#xA;	geometry =Line.ByStartPointEndPoint(A, B);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, B};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;1c&quot;)&#xA;	{&#xA;	//Definition for 1c&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 1c&#xA;	geometry =Line.ByStartPointEndPoint(B, A);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, A};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;2a&quot;)&#xA;	{&#xA;	//Definition for 2a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	t1 = {A, D, C};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;2b&quot;)&#xA;	{&#xA;	//Definition for 2b&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	t1 = {A, B, C};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;2c&quot;)&#xA;	{&#xA;	//Definition for 2c&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	t1 = {B, C, D};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;2d&quot;)&#xA;	{&#xA;	//Definition for 1b&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 2d&#xA;	t1 = {B, A, D};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;3a&quot;)&#xA;	{&#xA;	//Definition for 3a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 3a&#xA;	t1 = {A, D, C, B};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, B};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;3b&quot;)&#xA;	{&#xA;	//Definition for 3b&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 3b&#xA;	t1 = {A, B, C, D};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;3c&quot;)&#xA;	{&#xA;	//Definition for 3c&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,-z)&#xA;	Ax = W0-W1;&#xA;	Az = H0-H1;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0-(H1/2);&#xA;	Dz = H0;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 3c&#xA;	t1 = {C, B, A, D};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;3d&quot;)&#xA;	{&#xA;	//Definition for 3d&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 3d&#xA;	t1 = {B, A, D, C};&#xA;	geometry = PolyCurve.ByPoints(t1, false);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;4a&quot;)&#xA;	{&#xA;	//Definition for 4a&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 4a&#xA;	t1 = {O, E, A};&#xA;	t2 = {O, F, C};&#xA;	polyCurve1 = PolyCurve.ByPoints(t1, false);&#xA;	polyCurve2 = PolyCurve.ByPoints(t2, false);&#xA;	geometry = {polyCurve1, polyCurve2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;4b&quot;)&#xA;	{&#xA;	//Definition for 4b&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 4b&#xA;	t1 = {O, H, A};&#xA;	t2 = {O, G, C};&#xA;	polyCurve1 = PolyCurve.ByPoints(t1, false);&#xA;	polyCurve2 = PolyCurve.ByPoints(t2, false);&#xA;	geometry = {polyCurve1, polyCurve2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;4c&quot;)&#xA;	{&#xA;	//Definition for 4c&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 4c&#xA;	t1 = {D, H, O};&#xA;	t2 = {B, E, O};&#xA;	polyCurve1 = PolyCurve.ByPoints(t1, false);&#xA;	polyCurve2 = PolyCurve.ByPoints(t2, false);&#xA;	geometry = {polyCurve1, polyCurve2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;4d&quot;)&#xA;	{&#xA;	//Definition for 4d&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 4d&#xA;	t1 = {B, F, O};&#xA;	t2 = {D, G, O};&#xA;	polyCurve1 = PolyCurve.ByPoints(t1, false);&#xA;	polyCurve2 = PolyCurve.ByPoints(t2, false);&#xA;	geometry = {polyCurve1, polyCurve2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;5a&quot;)&#xA;	{&#xA;	//Definition for 5a&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z) centered in O grid point&#xA;	Ax = W0-(W1/2);&#xA;	Az = H0-(H1/2);&#xA;	Ex = W0;&#xA;	Bx = H0+(H1/2);&#xA;	Hz = H0;&#xA;	Dz = H0+(H1/2);&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 5a&#xA;	t1 = {C, B, A};&#xA;	t2 = {C, D, A};&#xA;	polyCurve1 = PolyCurve.ByPoints(t1, false);&#xA;	polyCurve2 = PolyCurve.ByPoints(t2, false);&#xA;	geometry = {polyCurve1, polyCurve2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, O};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;6a&quot;)&#xA;	{&#xA;	//Definition for 6a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(B, A);&#xA;	vector2 = Vector.ByTwoPoints(B, C);&#xA;	geometry = Arc.ByStartEndAndTangencies(A, vector1, C, vector2);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;6b&quot;)&#xA;	{&#xA;	//Definition for 6b&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(D, A);&#xA;	vector2 = Vector.ByTwoPoints(D, C);&#xA;	geometry = Arc.ByStartEndAndTangencies(A, vector1, C, vector2);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;6c&quot;)&#xA;	{&#xA;	//Definition for 6c&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(A, B);&#xA;	vector2 = Vector.ByTwoPoints(A, D);&#xA;	geometry = Arc.ByStartEndAndTangencies(B, vector1, D, vector2);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;7a&quot;)&#xA;	{&#xA;	//Definition for 7a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(E, O);&#xA;	vector2 = Vector.ByTwoPoints(E, A);&#xA;	vector3 = Vector.ByTwoPoints(G, O);&#xA;	vector4 = Vector.ByTwoPoints(G, D);&#xA;	arc1 = Arc.ByStartEndAndTangencies(O, vector1, A, vector2);&#xA;	arc2 = Arc.ByStartEndAndTangencies(O, vector3, D, vector4);&#xA;	geometry = {arc1, arc2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;7b&quot;)&#xA;	{&#xA;	//Definition for 7b&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,-z)&#xA;	Ax = W0-W1;&#xA;	Az = H0-H1;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0-(H1*2);&#xA;	Dz = H0;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 7b&#xA;	r1 = W1/2;&#xA;	r2 = H1;&#xA;	plane = Plane.ByThreePoints(G, D, O);&#xA;	geometry = EllipseArc.ByPlaneRadiiAngles(plane, r2, r1, -90, 180);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;7c&quot;)&#xA;	{&#xA;	//Definition for 7c&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (-x,z)&#xA;	Ax = W0-(W1*2);&#xA;	Az = H0;&#xA;	Ex = W0-W1;&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 7c&#xA;	r1 = W1;&#xA;	r2 = H1/2;&#xA;	plane = Plane.ByThreePoints(F, C, O);&#xA;	geometry = EllipseArc.ByPlaneRadiiAngles(plane, r1, r2, -90, 180);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;7d&quot;)&#xA;	{&#xA;	//Definition for 7d&#xA;	H1=HW[11];&#xA;	W1=HW[21];&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Local System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+H1;&#xA;	Dz = H0+(H1*2);&#xA;	//9 Points grid&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Geometry 7d&#xA;	r1 = W1/2;&#xA;	r2 = H1;&#xA;	plane = Plane.ByThreePoints(E, O, A);&#xA;	geometry = EllipseArc.ByPlaneRadiiAngles(plane, r1, r2, 0, 180);&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;8a&quot;)&#xA;	{&#xA;	//Definition for 8a&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (x,z)&#xA;	Ax = W0;&#xA;	Az = H0;&#xA;	Ex = W0+(W1/2);&#xA;	Bx = W0+W1;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(H, O);&#xA;	vector2 = Vector.ByTwoPoints(H, A);&#xA;	vector3 = Vector.ByTwoPoints(F, O);&#xA;	vector4 = Vector.ByTwoPoints(F, C);&#xA;	arc1 = Arc.ByStartEndAndTangencies(O, vector1, A, vector2);&#xA;	arc2 = Arc.ByStartEndAndTangencies(O, vector3, C, vector4);&#xA;	geometry = {arc1, arc2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;8b&quot;)&#xA;	{&#xA;	//Definition for 8b&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;8c&quot;)&#xA;	{&#xA;	//Definition for 8c&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;8d&quot;)&#xA;	{&#xA;	//Definition for 8d&#xA;	H1=(i[11]);&#xA;	W1=(i[21]);&#xA;	W0= StartPt.X;&#xA;	H0= StartPt.Z;&#xA;	//Coordinate System (-x,z)&#xA;	Ax = W0-W1;&#xA;	Az = H0;&#xA;	Ex = W0-(W1/2);&#xA;	Bx = W0;&#xA;	Hz = H0+(H1/2);&#xA;	Dz = H0+H1;&#xA;	//Grid Point&#xA;	yPt= StartPt.Y;&#xA;	A = Point.ByCoordinates(Ax,yPt,Az);&#xA;	E = Point.ByCoordinates(Ex,yPt,Az);&#xA;	B = Point.ByCoordinates(Bx,yPt,Az);&#xA;	H = Point.ByCoordinates(Ax,yPt,Hz);&#xA;	O = Point.ByCoordinates(Ex,yPt,Hz);&#xA;	F = Point.ByCoordinates(Bx,yPt,Hz);&#xA;	D = Point.ByCoordinates(Ax,yPt,Dz);&#xA;	G = Point.ByCoordinates(Ex,yPt,Dz);&#xA;	C = Point.ByCoordinates(Bx,yPt,Dz);&#xA;	//Func_Geometry&#xA;	vector1 = Vector.ByTwoPoints(E, O);&#xA;	vector2 = Vector.ByTwoPoints(E, B);&#xA;	vector3 = Vector.ByTwoPoints(G, O);&#xA;	vector4 = Vector.ByTwoPoints(G, D);&#xA;	arc1 = Arc.ByStartEndAndTangencies(O, vector1, B, vector2);&#xA;	arc2 = Arc.ByStartEndAndTangencies(O, vector3, D, vector4);&#xA;	geometry = {arc1, arc2};&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, D};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;9a&quot;)&#xA;	{&#xA;	//Definition for 9a&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;9b&quot;)&#xA;	{&#xA;	//Definition for 9b&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;9c&quot;)&#xA;	{&#xA;	//Definition for 9c&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;9d&quot;)&#xA;	{&#xA;	//Definition for 9d&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;else if (i[0]==&quot;10a&quot;)&#xA;	{&#xA;	//Definition for 10a&#xA;&#xA;	//***VRIM***//&#xA;	//Architectural Element&#xA;	FamilyName=i[2];&#xA;	nGA= i[3];&#xA;    //Geometry Output;&#xA;	IM = {FamilyName,nGA};&#xA;	return={geometry, IM, C};&#xA;//-------------------------------------------------------------------//&#xA;	}&#xA;}&#xA;};" ShouldFocus="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <CoreNodeModels.Watch guid="797da3fc-9d0f-4d24-b49a-07d5566d08cb" type="CoreNodeModels.Watch" nickname="Watch" x="1744.65077573048" y="624.245000698271" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Watch>
    <CoreNodeModels.Watch guid="5ab2c0c7-71ad-460d-8cc3-35c1043f426e" type="CoreNodeModels.Watch" nickname="Watch" x="1683.42622965729" y="207.787998634128" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Watch>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0010f827-d281-46b6-8fd1-407dd0be577e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="237.512348807004" y="376.810808783722" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="i: var[];" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d12f6c7e-e190-42bd-9877-6414af2c26ba" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="228.482778187159" y="544.502834580846" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="StartPt:var;" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="ac6d7b93-9d2c-4ea9-b35f-09de4a2c2c21" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1847.66274804984" y="768.916273352058" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Moulding;" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="6ac893bc-1dfe-4869-95ac-3aed5ce13e47" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1845.43775845687" y="850.316590859958" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Info;" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="956e3a94-ca26-4bcf-93cb-bd1f6ccb1272" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1847.59393166387" y="916.809414125008" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="EndPoint;" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="632fd6b3-dcbb-44dd-97e9-404e8817311c" start_index="0" end="ac6d7b93-9d2c-4ea9-b35f-09de4a2c2c21" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="632fd6b3-dcbb-44dd-97e9-404e8817311c" start_index="1" end="6ac893bc-1dfe-4869-95ac-3aed5ce13e47" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="632fd6b3-dcbb-44dd-97e9-404e8817311c" start_index="2" end="956e3a94-ca26-4bcf-93cb-bd1f6ccb1272" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3ee74fd0-7ffc-4116-bcb3-daf8e8610abd" start_index="0" end="632fd6b3-dcbb-44dd-97e9-404e8817311c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="215f32c8-e704-4ed2-a31c-9f20389ca203" start_index="0" end="5ab2c0c7-71ad-460d-8cc3-35c1043f426e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="215f32c8-e704-4ed2-a31c-9f20389ca203" start_index="1" end="797da3fc-9d0f-4d24-b49a-07d5566d08cb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="215f32c8-e704-4ed2-a31c-9f20389ca203" start_index="2" end="3ee74fd0-7ffc-4116-bcb3-daf8e8610abd" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0010f827-d281-46b6-8fd1-407dd0be577e" start_index="0" end="215f32c8-e704-4ed2-a31c-9f20389ca203" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d12f6c7e-e190-42bd-9877-6414af2c26ba" start_index="0" end="215f32c8-e704-4ed2-a31c-9f20389ca203" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="71.7642669677734" eyeY="27.7383689880371" eyeZ="-33.0553359985352" lookX="-30.5524387359619" lookY="-13.7742080688477" lookZ="35.533821105957" upX="-0.0454782657325268" upY="0.997564017772675" upZ="0.0528932251036167" />
  </Cameras>
</Workspace>